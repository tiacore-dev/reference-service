import traceback
from loguru import logger
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import JSONResponse


class CatchAllExceptionsMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request, call_next):
        try:
            response = await call_next(request)
            if response.status_code == 400:
                body = await request.body()
                logger.error("üö® 400 Bad Request –æ—Ç FastAPI")
                logger.error(f"‚û°Ô∏è URL: {request.url}")
                logger.error(f"‚û°Ô∏è Headers: {dict(request.headers)}")
                logger.error(
                    f"‚û°Ô∏è Body: {body.decode('utf-8', errors='ignore')}")
            return response
        except Exception as e:
            tb = traceback.format_exc()
            logger.critical("üî• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ middleware!")
            logger.critical(f"{e}\n{tb}")
            return JSONResponse(status_code=500, content={"detail": "Internal Server Error"})
