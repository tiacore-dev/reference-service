import logging
import sys

from loguru import logger
from prometheus_client import Counter

# üìä Prometheus –º–µ—Ç—Ä–∏–∫–∏
error_counter = Counter("fastapi_errors_total", "Total number of FastAPI errors")
error_counter_by_user = Counter(
    "fastapi_errors_total_by_user",
    "Total number of errors per user",
    ["user_id", "login", "role"],
)


def exclude_metrics_log(record):
    # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ access-–ª–æ–≥–∏ /metrics
    message = record.get("message", "")
    if "GET /metrics" in message and "200" in message:
        return False
    return True


# üìà –ü—Ä–æ–º–µ—Ç–µ–µ–≤—Å–∫–∏–π —Ö—É–∫ ‚Äî —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ ERROR –∏ –≤—ã—à–µ
def prometheus_hook(message):
    record = message.record
    if record["level"].no >= 40:
        error_counter.inc()
        try:
            error_counter_by_user.labels(
                user_id=record.get("extra", {}).get("user_id", "unknown"),
                login=record.get("extra", {}).get("login", "system"),
                role=record.get("extra", {}).get("role", "system"),
            ).inc()
        except Exception as e:
            print(f"[PrometheusHook] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–µ –º–µ—Ç—Ä–∏–∫: {e}")


# üîÅ –ü–µ—Ä–µ—Ö–≤–∞—Ç –ª–æ–≥–æ–≤ –∏–∑ logging –≤ loguru
class InterceptHandler(logging.Handler):
    def emit(self, record):
        message = record.getMessage()

        # üí° –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º /metrics –¥–ª—è access-–ª–æ–≥–æ–≤
        if "GET /metrics" in message and ("200" in message or "307" in message):
            return

        try:
            level = logger.level(record.levelname).name
        except Exception:
            level = record.levelno

        frame, depth = logging.currentframe(), 2
        while frame and frame.f_code.co_filename == logging.__file__:
            frame = frame.f_back
            depth += 1

        logger.opt(depth=depth, exception=record.exc_info).log(level, message)


# üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
def setup_logger():
    logger.remove()

    # üéØ STDOUT –¥–ª—è Loki (–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å serialize=True)
    logger.add(
        sys.stdout,
        level="DEBUG",
        format="""{time:YYYY-MM-DDTHH:mm:ss.SSSZ} | {level} 
        | {name}:{function}:{line} - {message}""",
        enqueue=True,
        backtrace=True,
        diagnose=True,
        filter=exclude_metrics_log,
    )

    # üßæ –§–∞–π–ª –ª–æ–≥–æ–≤
    logger.add(
        "logs/app.log",
        level="DEBUG",
        rotation="10 MB",
        retention="7 days",
        format="""{time:YYYY-MM-DD HH:mm:ss} | {level:<8}
          | {name}:{function}:{line} - {message}""",
        enqueue=True,
    )

    # üì° –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Prometheus hook
    logger.add(prometheus_hook, level="ERROR")

    # üîó –ü–µ—Ä–µ—Ö–≤–∞—Ç –ª–æ–≥–æ–≤
    logging.basicConfig(handlers=[InterceptHandler()], level=logging.INFO, force=True)

    for name in (
        "uvicorn",
        "uvicorn.error",
        "uvicorn.access",
        "fastapi",
        "gunicorn",
        "gunicorn.access",
        "gunicorn.error",
    ):
        logging.getLogger(name).handlers = [InterceptHandler()]
        logging.getLogger(name).setLevel(logging.INFO)
